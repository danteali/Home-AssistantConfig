####################################################################################################
## Package - Octopus Energy Pricing (pulled from Prometheus metrics)
####################################################################################################

# Uses command line sensor to pull pricing data from Prometheus
# (pricing data sourced from Octopus API and entered into Prometheus with NodeExporter via crontab job).

# Source: 
# https://www.home-assistant.io/integrations/sensor.command_line/
####################################################################################################

sensor:
  - platform: command_line
    name: electric_tariff_rate_octopus_prometheus
    command: echo "scale=4; $( curl -G --data-urlencode 'query=last_over_time(node_octopus_energy_unitrate_electricity_pence[1h])' https://victoriametrics.mc-guinness.co.uk/api/v1/query  | jq .data.result[].value[1] | sed 's/"//g' ) / 100" | bc -l
    unit_of_measurement: "GBP/kWh"
    scan_interval: 300
    # If we end up using plain curl output (without additional piped commands, we can extract the json value)
    #value_template: "{{ value_json.data.result[0].value[1] }}"
    #value_template: "{{ float(value_json.data.result[0].value[1]) / 100 }}"

  - platform: command_line
    name: electric_tariff_standing_octopus_prometheus
    command: echo "scale=4; $( curl -G --data-urlencode 'query=last_over_time(node_octopus_energy_standingcharge_electricity_pence[1h])' https://victoriametrics.mc-guinness.co.uk/api/v1/query  | jq .data.result[].value[1] | sed 's/"//g' ) / 100" | bc -l
    unit_of_measurement: "GBP/kWh"
    scan_interval: 300
    # If we end up using plain curl output (without additional piped commands, we can extract the json value)
    #value_template: "{{ value_json.data.result[0].value[1] }}"
    #value_template: "{{ float(value_json.data.result[0].value[1]) / 100 }}"

  - platform: command_line
    name: gas_tariff_rate_octopus_prometheus
    command: echo "scale=4; $( curl -G --data-urlencode 'query=last_over_time(node_octopus_energy_unitrate_gas_pence[1h])' https://victoriametrics.mc-guinness.co.uk/api/v1/query  | jq .data.result[].value[1] | sed 's/"//g' ) / 100" | bc -l
    unit_of_measurement: "GBP/kWh"
    scan_interval: 300
    # If we end up using plain curl output (without additional piped commands, we can extract the json value)
    #value_template: "{{ value_json.data.result[0].value[1] }}"
    #value_template: "{{ float(value_json.data.result[0].value[1]) / 100 }}"

  - platform: command_line
    name: gas_tariff_standing_octopus_prometheus
    command: echo "scale=4; $( curl -G --data-urlencode 'query=last_over_time(node_octopus_energy_standingcharge_gas_pence[1h])' https://victoriametrics.mc-guinness.co.uk/api/v1/query  | jq .data.result[].value[1] | sed 's/"//g' ) / 100" | bc -l
    unit_of_measurement: "GBP/kWh"
    scan_interval: 300
    # If we end up using plain curl output (without additional piped commands, we can extract the json value)
    #value_template: "{{ value_json.data.result[0].value[1] }}"
    #value_template: "{{ float(value_json.data.result[0].value[1]) / 100 }}"